/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* getKthNode(ListNode* temp, int k){
        while(--k && temp != NULL){
            temp = temp -> next;
        }
        return temp;
    }
    ListNode* reverseLinkedList(ListNode* head){
        if(head == NULL || head -> next == NULL){
            return head;
        }
        ListNode* newHead = reverseLinkedList(head -> next);
        ListNode* newNode = head -> next;
        newNode -> next = head;
        head -> next = NULL;
        return newHead;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        ListNode* prevLast = NULL;
        while(temp != NULL){
            ListNode* KthNode = getKthNode(temp, k);
            if(KthNode == NULL){
                if(prevLast != NULL){
                    prevLast -> next = temp;
                }
                break;
            }
            ListNode* nextNode = KthNode -> next;
            KthNode -> next = NULL;
            reverseLinkedList(temp);
            if(temp == head){
                head = KthNode;
            }else{
                prevLast -> next = KthNode;
            }
            prevLast = temp;
            temp = nextNode;
        }
        return head;
    }
};
