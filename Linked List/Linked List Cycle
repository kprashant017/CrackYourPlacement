/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // // Brute Force
        // unordered_map<ListNode*, int> ump;
        // ListNode* temp = head;
        // while(temp != NULL){
        //     if(ump.find(temp) != ump.end()){
        //         return true;
        //     }
        //     ump[temp] = 1;
        //     temp = temp -> next;
        // }
        // return false;

        // Optimal Approach
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast -> next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
            if(slow == fast){
                return true;
            }
        }
        return false;

    }
};
