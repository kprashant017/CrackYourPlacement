class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        // // Brute Force
        // int count0 = 0, count1 = 0, count2 = 0;
        // Node* temp = head;
        // while(temp != NULL){
        //     if(temp -> data == 0){
        //         count0++;
        //     }else if(temp -> data == 1){
        //         count1++;
        //     }else{
        //         count2++;
        //     }
        //     temp = temp -> next;
        // }
        // temp = head;
        // while(temp != NULL){
        //     if(count0){
        //         temp -> data = 0;
        //         count0--;
        //     }else if(count1){
        //         temp -> data = 1;
        //         count1--;
        //     }else{
        //         temp -> data = 2;
        //         count2--;
        //     }
        //     temp = temp -> next;
        // }
        // return head;
        
        
        // Optimal Approach
        Node* temp = head;
        Node* zeroHead = new Node(-1);
        Node* oneHead = new Node(-1);
        Node* twoHead = new Node(-1);
        Node* zero = zeroHead;
        Node* one = oneHead;
        Node* two = twoHead;
        
        while(temp != NULL){
            if(temp -> data == 0){
                zero -> next = temp;
                zero = zero -> next;
            }else if(temp -> data == 1){
                one -> next = temp;
                one = one -> next;
            }else{
                two -> next = temp;
                two = two -> next;
            }
            temp = temp -> next;
        }
        zero -> next = oneHead -> next ? oneHead -> next : twoHead -> next;
        one -> next = twoHead -> next;
        two -> next = NULL;
        return zeroHead -> next;
    }
};
